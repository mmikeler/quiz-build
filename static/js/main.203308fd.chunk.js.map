{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","options","window","quizOptions","useState","step","setStep","result","setResult","length","steps","setStepWrapper","action","newStep","sendForm","e","a","preventDefault","formData","FormData","target","html","name","value","push","href","id","onSubmit","className","Parts","o","ind","onClick","Btn","text","type","Result","props","map","i","s","open","Step","question","Variants","fieldType","RadioFields","SubmitFields","variants","f","RadioField","fieldName","answer","FormControl","label","fields","req","required","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.203308fd.chunk.js","sourcesContent":["import './q.sass';\nimport React, { useState } from 'react';\n\nfunction App() {\n  const options = window.quizOptions;\n  const [step, setStep] = useState(1);\n  const [result, setResult] = useState([]);\n  const length = options.steps.length;\n\n  const setStepWrapper = (action) => {\n    let newStep = step;\n    let length = options.steps.length;\n    if (action === 'prev') {\n      newStep = step - 1\n    }\n    else {\n      newStep = step + 1\n    }\n    setStep(newStep >= 1 && newStep <= length ? newStep : step)\n  }\n\n  const sendForm = async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData(e.target);\n    let html = [];\n    for (let [name, value] of formData) {\n      html.push([name,value]);\n    }\n    setResult(html);\n  }\n\n  return (\n    <>\n      <h1>Образец формы опроса (квиза)</h1>\n\n      <ul>\n        <li>Настраивается под любой сайт и любые нужды</li>\n        <li>Может быть интегрирован на любой сайт</li>\n        <li>Серверная часть для обработки и отправки сообщений добавляется отдельно</li>\n      </ul>\n\n      <p>Для заказа обратитесь в <a href=\"https://tlgg.ru/@mmikeler\">Telegram</a> или, для работы через безопасную сделку, воспользуйтесь <a href=\"https://kwork.ru/script-programming/16230254/razrabotka-kviza-formy-oprosa-dlya-sayta-lyuboy-slozhnosti\">\"KWORK\"</a></p>\n      \n      <div id=\"q\">\n        <form id=\"q-form\" onSubmit={sendForm}>\n          \n          <div className=\"q__header\">Шаг {step} из {length}</div>\n          \n          <Parts o={options} ind={step - 1} />\n        \n          <div className=\"q__footer\">\n            <div onClick={() => setStepWrapper('prev')} className=\"q-btn\">Назад</div>\n\n            { step !== length ?\n                <Btn text=\"Далее\" action={() => setStepWrapper('next')} />\n              :\n                <button className=\"q-btn\" type=\"submit\">Отправить</button>\n            }\n          </div>\n        </form>\n        <Result a={result} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\nfunction Btn(props) {\n  const {text, action} = { ...props };\n\n  return <div onClick={action} className=\"q-btn\">{text}</div>\n}\n\nfunction Result(props) {\n  const html = props.a.map((e, i) => {\n    return (\n      <li>{e[0]} = { e[1] }</li>\n    )\n  })\n  return (\n    <div className=\"q__result\">\n      <p>Выходные данные формы</p>\n      <ul className=\"q__result-list\">{html}</ul>\n    </div>\n  )\n}\n\nfunction Parts(props) {\n  const options = props.o;\n  const html = options.steps.map((s, i) => {\n    const open = props.ind === i ? 'open' : '';\n    return (\n      <Step key={`step_${i}`} s={s} open={open} />\n    )\n  })\n\n  return html;\n}\n\nfunction Step(props) {\n  const s = props.s;\n  return (\n    <div className={`q__step-content ${props.open}`}>\n      <p className=\"q__question\">{s.question}</p>\n      <div className=\"q__variants\">\n        <Variants s={s} />\n      </div>\n    </div>\n  );\n}\n\nfunction Variants(props) {\n  const type = props.s.fieldType;\n  if (type === 'radio') {\n    return <RadioFields s={props.s} />\n  }\n  else if (type === 'submit') {\n    return <SubmitFields {...props} />\n  }\n  return('Неизвестный тип поля')\n}\n\nfunction RadioFields(props) {\n  const fields = props.s.variants.map((f, i) => {\n    return <RadioField key={`field_${i}`} f={f} fieldName={props.s.fieldName} />\n  });\n\n  return fields;\n}\n\nfunction RadioField(props) {\n  const o = props.f\n  const value = o.value ? o.value : o.answer;\n  return (\n    <FormControl label={o.answer}>\n      <input type=\"radio\" name={props.fieldName} value={value} />\n    </FormControl>\n  )\n}\n\nfunction SubmitFields(props) {\n  if (props.s.fields.length > 0) {\n    const html = props.s.fields.map((f, i) => {\n      return (\n        <FormControl\n          key={`fc_${i}`}\n          label={f.label}\n          name={f.fieldName}\n          req={f.required}\n          type=\"text\"\n        />\n      )\n    })\n    return html;\n  }\n  else {\n    return 'None fields';\n  }\n}\n\nfunction FormControl(props) {\n  const { label, name, req, type } = { ...props };\n  if (type === 'text') {\n    return (\n      <label className=\"text-field\">\n        <span>{label}</span>\n        <input type={type} name={name} required={req} />\n      </label>\n      \n    )\n  }\n  else {\n    return (\n      <label>\n        {props.children}\n        <span>{props.label}</span>\n      </label>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('quiz')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}